#!/bin/bash

run-playbook() {
  book=$1
  tenant=$2

  if [[ -z "$book" && -z "$tenant" ]]; then
    echo "Usage: \n run-playbook <playbook> <tenant> [--options]"
    return 255
  fi
  
  shift 2
  ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook ${book}.yml -i site/${tenant}/inventory -e "site=$PWD/site/${tenant}/site/site" --user=msysdeploy --private-key=~/.ssh/ecbuild $@
}

_get_tenant_folder() {
  case $1 in
    p) tenant=consolidated-prd;;
    s) tenant=consolidated-stg;;
    t) tenant=consolidated-tst;;
    j) tenant=jordan-tst;;
    eu) tenant=consolidated-eu;;
    *) tenant=spe-$1;;
  esac;

  echo $ANSIBLE_ENV_PATH/$tenant
}

cass() {
  cqlsh $(parse-inv -f $(_get_tenant_folder $1)/inventory/cassandra cassandra | head -n 1)
}

vert() {
  VERT_ENV=$1

  shift 1
  vsql -h `jq -r ".vertica.hosts[0]" "$PROJECTS_DIR/metrics-api/config/$VERT_ENV.json"` -U $VERTICA_USER $(if [ "$VERTICA_PASSWORD" != "" ] ; then; echo "-w $VERTICA_PASSWORD"; fi) $@
}

mvert() {
  tenant=$1
  shift 1
  vsql -h `parse-inv -f $(_get_tenant_folder $tenant)/inventory/cluster vertica_message_events | head -n 1` -U $VERTICA_USER $(if [ "$VERTICA_PASSWORD" != "" ] ; then; echo "-w $VERTICA_PASSWORD"; fi) $@
}

red() {
  redis-cli -c -h $(gev $1 webhooks.redis.url)
}


gev() {
  echo $(cat $(_get_tenant_folder $1)/site/site.yml | js-yaml | jq -r ".$2")
}

g-t-v() {
  case $1 in
    p) ex_path=tenants/spc/site.yml;;
    s) ex_path=tenants/spcstg/site.yml;;
    t) ex_path=tenants/spcuat/site.yml;;
    eu) ex_path=tenants/spceu/site.yml;;
    *) ex_path=site/site.yml;;
  esac;

  echo $(cat $(_get_tenant_folder $1)/$ex_path | js-yaml | jq -r ".$2")
}

api-key() {
  echo `g-t-v $1 app_smoke_api_key`
}

api-host() {
  echo `g-t-v $1 api_host`
}

i-api-host() {
  echo `g-t-v $1 internal_elb_host`
}

t-curl() {
  tenant=$1
  endpoint=$2
  shift 2
  
  curl -H "Content-Type: application/json" -H "Authorization: $(api-key $tenant)" https://$(api-host $tenant)/api/v1/${endpoint} $@
}

hp () {
  cd $ANSIBLE_ENV_PATH/..
  hg pull -u
  hg pull -u -R site
}

hu () {
  hg up $1
  hg up $1 -R site
}

gcomp () {
 git commit -am ${@} 
 git push
}

bam () {
  open $(jq -r "._meta.${1}" "$(git rev-parse --show-toplevel)/package.json")
}

configs () {
  env=$1;

  echo "Getting configs from $env";

  apiservices=('ab-testing-api' 'integrations-api' 'ip-pools-api' 'message-events-api' 'messaging-tools-api' 'metrics-api' 'omni-api' 'sparkpost-scripts' 'suppression-api' 'unengaged-recipients-api' 'users-api' 'webhooks-api');


  for service in "${apiservices[@]}"; do
     echo "Getting $service production.json file";
     mkdir -p /var/tmp/prd-configs/$service/config
     scp $(parse-inv -f $(_get_tenant_folder $env)/inventory/cluster application | head -n 1):/opt/msys/app/$service/config/production.json /var/tmp/prd-configs/$service/config/production.json
     if [ "$service" = 'users-api' ]; then
       scp $(parse-inv -f $(_get_tenant_folder $env)/inventory/cluster application | head -n 1):/opt/msys/app/$service/config/production-auth.json /var/tmp/prd-configs/$service/config/production-auth.json
     fi
  done;

  whservices=('suppression-loader' 'webhooks-delivery');

  for service in "${whservices[@]}"; do
     echo "Getting $service production.json file";
     mkdir -p /var/tmp/prd-configs/$service/config
     scp $(parse-inv -f $(_get_tenant_folder $env)/inventory/cluster etl_webhooks | head -n 1):/opt/msys/app/$service/config/production.json /var/tmp/prd-configs/$service/config/production.json
  done;

  etlservices=('omni');
  etlservers=($(parse-inv -f $(_get_tenant_folder $env)/inventory/cluster etl));

  for server in "${etlservers[@]}"; do
    for service in "${etlservices[@]}"; do
       echo "Getting $service production.json file";
       mkdir -p /var/tmp/prd-configs/$service
       scp $server:/opt/msys/app/omni-etl/config/production.json /var/tmp/prd-configs/$service/$( echo $server | tr "." "\n" | head -n 1).omni_etl.production.json
    done;
  done;
}
